// Code generated by protoc-gen-go.
// source: push.proto
// DO NOT EDIT!

/*
Package logic is a generated protocol buffer package.

It is generated from these files:
	push.proto

It has these top-level messages:
	PushRequest
	PushReply
*/
package logic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 	appId     int
// appName   string
// expire    int
// delay     int
// deviceIds []string
// requestId int
// message   string
type PushRequest struct {
	AppId     int32    `protobuf:"varint,1,opt,name=appId" json:"appId,omitempty"`
	AppName   string   `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	Expire    int64    `protobuf:"varint,3,opt,name=expire" json:"expire,omitempty"`
	Delay     int64    `protobuf:"varint,4,opt,name=delay" json:"delay,omitempty"`
	RequestId int32    `protobuf:"varint,5,opt,name=requestId" json:"requestId,omitempty"`
	Message   string   `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	DeviceIds []string `protobuf:"bytes,7,rep,name=deviceIds" json:"deviceIds,omitempty"`
}

func (m *PushRequest) Reset()                    { *m = PushRequest{} }
func (m *PushRequest) String() string            { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()               {}
func (*PushRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PushRequest) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *PushRequest) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *PushRequest) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *PushRequest) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *PushRequest) GetRequestId() int32 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *PushRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *PushRequest) GetDeviceIds() []string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

type PushReply struct {
	Result int32 `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *PushReply) Reset()                    { *m = PushReply{} }
func (m *PushReply) String() string            { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()               {}
func (*PushReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PushReply) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "logic.PushRequest")
	proto.RegisterType((*PushReply)(nil), "logic.PushReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logic service

type LogicClient interface {
	// push msg
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
}

type logicClient struct {
	cc *grpc.ClientConn
}

func NewLogicClient(cc *grpc.ClientConn) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := grpc.Invoke(ctx, "/logic.Logic/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logic service

type LogicServer interface {
	// push msg
	Push(context.Context, *PushRequest) (*PushReply, error)
}

func RegisterLogicServer(s *grpc.Server, srv LogicServer) {
	s.RegisterService(&_Logic_serviceDesc, srv)
}

func _Logic_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.Logic/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logic.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Logic_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "push.proto",
}

func init() { proto.RegisterFile("push.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0xad, 0xdd, 0x74, 0xe9, 0x78, 0x91, 0x41, 0x24, 0x88, 0x87, 0xa5, 0x5e, 0x3c, 0xe5,
	0xa0, 0x07, 0x9f, 0x61, 0x41, 0x44, 0xf2, 0x06, 0x71, 0x33, 0xd4, 0x42, 0x4a, 0x63, 0xd2, 0x8a,
	0x7d, 0x3c, 0xdf, 0xcc, 0xfc, 0x93, 0xea, 0xad, 0xbf, 0xdf, 0xb4, 0xf3, 0xf5, 0x1b, 0x00, 0xbb,
	0xf8, 0x77, 0x61, 0xdd, 0x34, 0x4f, 0xc8, 0xcc, 0xd4, 0x0f, 0xa7, 0xee, 0xbb, 0x82, 0x8b, 0xd7,
	0x60, 0x25, 0x7d, 0x2c, 0xe4, 0x67, 0xbc, 0x02, 0xa6, 0xac, 0x3d, 0x6a, 0x5e, 0x1d, 0xaa, 0x7b,
	0x26, 0x33, 0x20, 0x87, 0x7d, 0x78, 0x78, 0x51, 0x23, 0xf1, 0xf3, 0xe0, 0x5b, 0xf9, 0x8b, 0x78,
	0x0d, 0x0d, 0x7d, 0xd9, 0xc1, 0x11, 0xaf, 0xc3, 0xa0, 0x96, 0x85, 0xe2, 0x1e, 0x4d, 0x46, 0xad,
	0x7c, 0x97, 0x74, 0x06, 0xbc, 0x85, 0xd6, 0xe5, 0xa0, 0x90, 0xc0, 0x52, 0xc2, 0x26, 0x62, 0xca,
	0x48, 0xde, 0xab, 0x9e, 0x78, 0x93, 0x53, 0x0a, 0xc6, 0xef, 0x34, 0x7d, 0x0e, 0x27, 0x3a, 0x6a,
	0xcf, 0xf7, 0x87, 0x3a, 0xcc, 0x36, 0xd1, 0xdd, 0x41, 0x9b, 0x2b, 0x58, 0xb3, 0xc6, 0x1f, 0x72,
	0xe4, 0x17, 0x33, 0x97, 0x06, 0x85, 0x1e, 0x9e, 0x80, 0x3d, 0xc7, 0xc6, 0x28, 0x60, 0x17, 0xdf,
	0x46, 0x14, 0xe9, 0x02, 0xe2, 0x4f, 0xfb, 0x9b, 0xcb, 0x7f, 0x2e, 0xac, 0xeb, 0xce, 0xde, 0x9a,
	0x74, 0xaf, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xad, 0x58, 0x36, 0x3d, 0x01, 0x00,
	0x00,
}

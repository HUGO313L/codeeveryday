
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # lua_package_path '/home/chuqq/bin/openresty/nginx/conf/?.lua;;';

    upstream masters {
        server 192.168.13.165:19333;
        server 192.168.13.165:19334;
        server 192.168.13.165:19335;
    }

    init_by_lua '
        aksk = {
            IxtcFJeXghnY9IAr = "l4npMLp13NoHSZaG",-- test
            PNGmeAEZ0sTwgfDh = "5GIaNcWym9MLGLdM",-- ota
            iBVtxR3vLqQI2lkx = "rOvFLivt3nWXHDJY",-- message+
            ViXRxOuDHBbha0Bc = "LWocCo7iEyumlATa" -- weather
        }

        cjson = require("cjson")

        function check_token()
            local crypt_uri = string.gsub(ngx.var.request_uri,"(.*)&t=.*", "%1")
            if not ngx.var.arg_t then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="t invalid: no t"}))
                return -1
            end
            local ak = string.gsub(ngx.var.arg_t, "(.*):.*", "%1")
            if not ak then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="t invalid: no ak"}))
                return -1
            end
            local token = string.gsub(ngx.var.arg_t, ".*:(.*)", "%1")
            if not token then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="t invalid: no token"}))
                return -1
            end
            local res = ngx.location.capture("/getsk", {args={ak=ak}})
            if res.status ~= ngx.HTTP_OK then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="t invalid: t check error"}))
                return -1
            end
            local expect_t = ngx.hmac_sha1(res.body,crypt_uri)
            local expect_t_hex = ndk.set_var.set_encode_hex(expect_t)
            if expect_t_hex ~= token then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="t invalid: t check error"}))
                return -1
            end

            return 0
        end
    ';

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    location /getsk {
        # TODO check local IP
        content_by_lua '
            local ak = ngx.var.arg_ak
            if not ak then
                ngx.status = ngx.HTTP_BAD_REQUEST
                return
            end

            local sk = aksk[ngx.var.arg_ak]
            if not sk then
                ngx.status = ngx.HTTP_NOT_FOUND
                return
            end

            ngx.print(sk)
        ';
    }

    location /masters/ {
        proxy_pass http://masters/;
    }

    location /dir/assign {
        default_type "application/json";
        content_by_lua '
            if not ngx.var.arg_collection then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="collection invalid"}))
                return
            end
            local ae = ngx.var.arg_ae
            if not ae or tonumber(ae) < os.time() then
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="ae invalid"}))
                return
            end

            local ret = check_token()
            if ret < 0 then
                return
            end

            local res = ngx.location.capture("/masters"..ngx.var.request_uri)
            ngx.status = res.status
            if res.status ~= ngx.HTTP_OK then
                ngx.say(res.body)
                return
            end
            local res2 = cjson.decode(res.body)
            res2.publicUrl = "http://192.168.13.165/f/"..res2.fid
            res2.fid = nil 
            res2.url = nil 
            ngx.say(cjson.encode(res2))
        ';
    }

    location /f/ {
        set $volume "";
        access_by_lua '
            local method = ngx.req.get_method()
            if method == "GET" then
                local e = ngx.var.arg_e
                if not e or (tonumber(e) ~= 0 and tonumber(e) < os.time()) then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({error="e invalid"}))
                    return
                end

                local ret = check_token()
                if ret < 0 then
                    return
                end
            elseif method == "POST" or method == "DELETE" then
                local we = ngx.var.arg_we
                if not we or tonumber(we) < os.time() then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say(cjson.encode({error="we invalid"}))
                    return
                end
                local ret = check_token()
                if ret < 0 then
                    return
                end
            else
                ngx.status = ngx.HTTP_BAD_REQUEST
                ngx.say(cjson.encode({error="method invalid"}))
                return
            end

            local fid = string.gsub(ngx.var.uri,"/f/([0-9a-z,]*).*","%1")
            local query = string.gsub(ngx.var.uri,"/f/(.*)","%1").."?"..ngx.var.query_string
            local master = "/masters/"..fid

            local res = ngx.location.capture(master)
            if res.status ~= ngx.HTTP_MOVED_PERMANENTLY then
                ngx.status = res.status
                ngx.say(res.body)
                return
            end

            if res.status ~= ngx.HTTP_MOVED_PERMANENTLY then
                ngx.status = res.status
                ngx.say(res.body)
                return
            end

            ngx.var.volume = res.header["Location"]
        ';
        proxy_pass $volume;
    }

     location /inline_concat {
         # MIME type determined by default_type:
         default_type 'text/plain';

         set $a "hello";
         set $b "world";
         # inline Lua script
         set_by_lua $res "return ngx.arg[1]..ngx.arg[2]" $a $b; 

         #--ngx.header["Location"] = "mylocationtest"
         echo $res;
     }


     location /rel_file_concat {
         set $a "foo";
         set $b "bar";
         # script path relative to nginx prefix
         # $ngx_prefix/conf/concat.lua contents:
         #
         #    return ngx.arg[1]..ngx.arg[2]
         #
         set_by_lua_file $res conf/concat.lua $a $b;
         echo $res;
     }

     location /abs_file_concat {
         set $a "fee";
         set $b "baz";
         # absolute script path not modified
         set_by_lua_file $res /usr/nginx/conf/concat.lua $a $b;
         echo $res;
     }

     location /lua_content {
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua "ngx.say('Hello,world!')";
     }

     location /nginx_var {
         # MIME type determined by default_type:
         default_type 'text/plain';

         # try access /nginx_var?a=hello,world
         content_by_lua "ngx.print(ngx.var['arg_a'], '\\n')";
     }

     location /request_body {
          # force reading request body (default off)
          lua_need_request_body on;
          client_max_body_size 50k;
          client_body_buffer_size 50k;

          content_by_lua 'ngx.print(ngx.var.request_body)';
     }

     # transparent non-blocking I/O in Lua via subrequests
     location /lua {
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua '
             local res = ngx.location.capture("/inline_concat")
             --ngx.print(res.header["Location"])
             if res.status == 200 then
                 ngx.print(res.body)
             end
         ';
     }

     # GET /recur?num=5
     location /recur {
         # MIME type determined by default_type:
         default_type 'text/plain';

         content_by_lua '
            local num = tonumber(ngx.var.arg_num) or 0

            if num > 50 then
                ngx.say("num too big")
                return
            end

            ngx.say("num is: ", num)

            if num > 0 then
                res = ngx.location.capture("/recur?num=" .. tostring(num - 1))
                ngx.print("status=", res.status, " ")
                ngx.print("body=", res.body)
            else
                ngx.say("end")
            end
            ';
     }

     location /foo {
         rewrite_by_lua '
             res = ngx.location.capture("/memc",
                 { args = { cmd = "incr", key = ngx.var.uri } }
             )
         ';

         proxy_pass http://blah.blah.com;
     }

     location /blah {
         access_by_lua '
             local res = ngx.location.capture("/auth")

             if res.status == ngx.HTTP_OK then
                 return
             end

             if res.status == ngx.HTTP_FORBIDDEN then
                 ngx.exit(res.status)
             end

             ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
         ';

         # proxy_pass/fastcgi_pass/postgres_pass/...
     }

     location /mixed {
         rewrite_by_lua_file /path/to/rewrite.lua;
         access_by_lua_file /path/to/access.lua;
         content_by_lua_file /path/to/content.lua;
     }

     # use nginx var in code path
     # WARNING: contents in nginx var must be carefully filtered,
     # otherwise there'll be great security risk!
     location ~ ^/app/([-_a-zA-Z0-9/]+) {
         set $path $1;
         content_by_lua_file /path/to/lua/app/root/$path.lua;
     }

     location /last {
        lua_need_request_body on;

        client_max_body_size 100k;
        client_body_buffer_size 100k;

        access_by_lua '
            -- check the client IP address is in our black list
            if ngx.var.remote_addr == "132.5.72.3" then
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end

            -- check if the request body contains bad words
            if ngx.var.request_body and
                     string.match(ngx.var.request_body, "fsck")
            then
                return ngx.redirect("/terms_of_use.html")
            end

            -- tests passed
        ';

        # proxy_pass/fastcgi_pass/etc settings
     }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
